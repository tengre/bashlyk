Tue, 28 Aug 2018 23:50:47 +0400
	Fix bugs
	Version 1.94

- improved handling of both command line options and configuration files:
  - CFG::bind.cli - fixed handling of arguments with whitespaces.
  - CFG::storage.use - changed handling of the short filenames, its search is
    first performed in the initialized configuration paths, only then in the
    current directory (this behavior moved from CFG::load). Configuration file
    is checked for reading and the ability to create it in the absence. If the
    specified file can't be used, an appropriate warning is issued and an
    internal configuration file is generated.
  - CFG::load - fixed a processing of the configurations with initial and/or end
    dots in the filename.
- pid::onExit.unlink.empty, pid::trap, std::temp - fixed handling of arguments
  with whitespaces
- added the pid::onExit.unlink.empty function for removing initialized but not
  used files.
- fixed handling of such input lines as '-E', '-e' by using 'printf' instead of
  'echo'
- msg::notify - fixed output logging for non interactive mode
- msg::getXsessionProperties - added partial support for the (X)wayland session
- a limitation was found in using the 'error' command. This command generates
  the code with 'eval', under certain conditions the command interpreter can
  execute the second and subsequent lines of a multi-line argument (for example,
  output of some command). To avoid this, you must apply one of the following
  rules:
  - do not use double quotes in the argument string of the 'error' command or at
    least around variables that may contain multi lines.
  - preliminarily delete linefeeds symbols, for example, with std::inline
- added new error states - AlreadyExist, NoSuchFile, NoSuchDir, TimeExpired and
  error handlers for err::postfix - AlreadyExist, NoSuchFile, NoSuchDir
- improved tests, descriptions and 'makefile' instructions
- libold.sh, libini.sh, ini2csv.awk, inisection2csv.awk are now obsolete and are
  not installed

details:

libcfg.sh:
- prefix 'config' in the name of the CFG instance sets the INI style
- CFG::get return error state for empty value
- added helper method - CFG::storage.use.default
- CFG::{read,load,save} - set storage if needed
- CFG::bind.cli:
 - handle a error of the missing args
 - std::whitespace.{en,de}code is used for handle the arguments with whitespaces

libstd.sh:
- std::whitespace.decode - improved tests
- added function std::inline for multi lines conversion to single line

bashlyk:
- added global array _bashlyk_aArg for command line options storing
- libini.sh is deprecated
- added external binary list
- check /proc/mounts

debian/control:
- added libc-bin to Depends list


Sun, 15 Apr 2018 14:24:16 +0400
	New upstream release
	Version 1.93

- libini library has been renamed to libcfg, which emphasizes the versatility of
  this library as a means of managing configurations or complex data
  conglomerations. Innovations:
  - added a separate method for specifying an external configuration store.
  - you can specify the configuration type (shellmode or INI) by the prefix of
    the instance name of the class CFG.
  - added bSaveConfig option for the instance settings
- liberr - the syntax of the error handling function is changed:
  'on error <action> <code> <hint>' -> 'error <code> <action> <hint>'
  - added the handlers NotNumber, NotExistNotCreated
  - added function err::debugf for formatted output
- fixed debian/postinst bug for a first installation
- updated lists of the external commands and exports

details:

libcfg.sh:
- CFG::storage.use without argument make $_bashlyk_pathDat directory and
  default storage
- if instance name begin with 'conf' then used "active configuration"
  mode (shellmode), wherein if the key is not a valid variable, then the
  'key = value' string turns into a comment
- added bSaveConfig option for management a preserving configuration on
  the CFG::save method call
- improved testunit for CFG::settings method
- added test for autoswitch testing
- updated descriptions
- changed CFG::{save,read,load,bind.cli} methods for use CFG::storage.use
  method

libmsg.sh:
- msg::notifyTool - fixed variable declaration

bashlyk:
- added global variable _bashlyk_pathCfg - _bashlyk_path{Cnf,Ini} sister

get-external-commands-and-export-list.sh:
- improved a performance by caching of the search
- agreed with the latest version of the bashlyk library


Mon, 05 Mar 2018 00:53:20 +0400
	New upstream release
	Version 1.92

- simplified preparation of tests due to the use of special operators:
<some code> | {{{
multiline
text to compare output
}}}

<some code> | {{pattern, string, regular expression}}

- improved support for bash 4.4
- added global variable $TMPEXEC as pointer to the path on the executable
  filesystem for temporary files
- added support for old dependent packages by using libold.sh
- improved liberr.sh library

details

testunit.awk:
- added code to create a temporary file that can be used by the diff
  command in the testunit
- logging of the embedded data disabled by 'bEmbed' variable
- '| {{{' saved stdout of the tested code to a 'right' temporary file,
  prepare saving of the  embedded data to a 'left' temporary file
- '}}}' display 'right' (result) temporary file and compare both files
  by diff command, 0 return code is ok.
- added support for indentation in blocks of embedded data to correct
  the generation of robodoc documentation
- added support for {{...}}[0]? and {{...}}[1!] operator

testunit.sh:
- added setting of TMPDIR variable
- added a two temporary files as diff arguments for '{{{}}}' operator

debian/postinst:
- compatibility is established for packages that depend on the version
  of the bashlyk up to 1.9x
- fixed error maintainer-script-should-not-use-dpkg-status-directly by
  using dpkg-query -W -f='${Depends}\n' ...
- removed unused variable

liberr.sh:
- err::eval:
  - fixed incomplete list of arguments
  - used err::orr instead err::status for arguments handling
  - arguments transferred to err::eval from alias level
  - splitted to the err::generate (public) and err::__generate
    (private) parts for protecting variables in arguments from local
    variables of this functions when calling the "eval"
  - updated tests and docs
  - reA{ct,rg} moved to library as readonly global _bashlyk_err_reA..
- err::sourcecode:
  - this function added to export list
  - added robodoc section and simple test
- err::or return 0-255 status now, the definition of [iError]<Status> is
  handled correctly
- err::status used err::orr
- err::handler renamed to err::postfix
- added simple test for err::stacktrace
- added error states NotInteger and NotDecimal and new error state
  _bashlyk_iError=255

libstd.sh:
- added std::isDecimal with tests
- std::temp - improved tests and error handling
- behavior of 'declare -A a' changed for bash 4.4. Declaration without
  definition does not return an error. std::isHash return error for
  undefined array

libini.sh:
- improved tests for INI::{g,s}et
- added sorting to the output of the INI::*show methods for a successful test
  run with multi-line output
- INI::__section.getArray return error for undefined array

libpid.sh:
- testunits - temporary executables create by a command like
  'std::temp cmd path=$TMPEXEC'

doc/bashlyk7.xml:
- description updated

bashlyk:
- variable $TMPEXEC set to the path on the executable filesystem
- bashlyk::init - removed unused local variables


Fri, 02 Jun 2017 16:12:43 +0400
	New upstream release
	Version 1.91

- significantly redesigned library functions naming - err,pid,msg,log,std
  libraries added similar functions with {err,pid,msg,log,std}:: prefix, old
  functions moved to libold for compatibility
- libcnf deprecated, early libcnf functions moved to libold
- INI changes:
  - INI::load - simplified representation of arguments, improved code
  - INI constructor - for instances created files of the methods for stack trace

details

libini.sh:
- INI::save:
  - fixed test - clean temporary *.bak file
- INI::load:
  - updated dependence test
  - parse arguments without ':' splitter
  - added internal function-macros INI::load::parse
  - unset INI::load::parse after using
- fixed typo duplicate init of the var _bashlyk_iErrorIniMissingMethod

liberr.sh:
- added iErrorNotDetected state for success code
- error state (and details) TryBoxException renamed to TryBlockException
- added new err::* functions set, old udf* functions moved to libold
- actions {exit,ret}echo and {exit,ret}warn renamed to {echo,warn}+{exit,return}
- udfOn replaced by err::handler with aliases:
  show,warn,abort,throw,exit+{echo,warn},errorify{,+echo,+warn}
- used regex for main function handling
- udfOnError replaced by err::eval (alias 'on error'):
  - updated <action> description of the robodoc section
  - add warns for the unexpected error code
  - improved arguments handling
  - used array for input data parsing
  - replace quote substs with printf '%q'
  - for _bashlyk_onError=debug mode 'exit' command replaced by err::orr and
    added stack trace output
  - updated for use msg::warn instead udfWarn
- added err::{CommandNotFound,NoSuchFileOrDir,InvalidVariable,EmptyVariable,
  MissingArgument,EmptyResult,stacktrace} - advanced analogues of the
  handlers from the old liberr functions
- udfSetLastError replaced by err::status, fixed local var declaration
- added and adopted try..catch (aliases) from old liberr:
  - err::__add_throw_to_command
  - err::__convert_try_to_func
  - err::exception.message
- used special robodoc section for aliases
- updated exported methods and external command lists
- added 'NOTES' tag for robodoc sections
- updated libraries for new aliases from liberr
- added fake error state Success (for robodoc sections)
- udfDebug moved from liblog.sh with name err::debug
- added new helper function err:orr - return setted status

libold.sh:
- removed udfTryEveryLine as deprecated
- udfTimeStamp:
  - duplicate any % from arguments
  - new bug - time stamp sometimes breaks from the output of the 'date'
- updated udfLogger for use new behavior of the udfTimeStamp

bashlyk{,.conf}:
- libold deprecated library
- removed libcnf from default list of libraries
- udfSetLog call replaced by log::file
- updated robodoc sections
- udfInit renamed to bashlyk::init
- udfMain renamed to bashlyk::main

libnet.sh:
- updated aliases robodoc section

robodoc.rc:
- added 'aliases' (A) header type
- added to ignore list *.deprecated

get-external-commands-and-export-list.sh:
- search all functions (remove 'udf' pattern)

libpid.sh:
udfCheckStarted replaced by pid::status:
 - improved tests and robodoc section
 - The allowable maximum <PID> value is checked
 - added helper functions pid::status.show
- udfStopProcess replaced by pid::stop
- udfSetPid replaced by pid::file
- udfExitIfAlreadyStarted replaced by pid::onStarted.exit
- udfAddPid2Clean replaced by pid::onExit.stop
- udfAddFD2Clean replaced by pid::onExit.close
- udfAdd{File,Path,..}2Clean replaced by pid::onExit.unlink
- added 'flock' to external command list
- add NOTES and flags external/private for robodoc sections

libmsg.sh:
- renamed functions:
  - udfEcho to msg::echo
  - udfWarn to msg::warn
  - udfMail to msg::mail
  - udfMessage to msg::notify
  - udfNotify2X to msg::notify2x
  - udfGetXSessionProperties to msg::getXsessionProperties
  - udfNotifyCommand to msg::notifyTool

liblog.sh:
- udfWarn (libmsg) replaced by 'on error' (liberr)
- direct import from libmsg not required now
- function renamed from
  udf{Log,SetLog,Logger,SetLOgSocket,IsInteract,Check4LogUse,IsTerminal}
  to log::{add,file,ger,init,interactivity,necessity,terminality}
  udfTimeStamp to log::stamp
- udf{Uptime,Finally,DateR} moved to libstd.sh
- log::stamp:
  - duplicate any % from arguments
  - improved test
- updated log::ger for use new behavior of the log::stamp

libstd.sh:
- for basic function udfIsValidVariable  unusable liberr calls
- added preloading libpid
- renamed functions
  from
  udf{PrepareByType,Cat,DateR,Finally,GetFreeFD,GetMd5,GetPathMd5,
  GetTimeInSec,IsHash,IsNumber,IsValidVariable,QuoteIfNeeded,
  ShowVariable,MakeTemp,Trim,Uptime,WSpace2Alias,Alias2WSpace,Xml}
  to
  std::{acceptArrayItem,cat,dateR,finally,getFreeFD,getMD5,getMD5::list,
  getTimeInSec,isHash,isNumber,isVariable,lazyquote,showVariable,temp,
  trim,uptime,whitespace::decode,whitespace::encode,xml}
- std::cat changed for the arguments handling

debian/{prerm,postinst}:
- remove/create link for bashlyk to the /usr/share/bashlyk

libcnf.sh (deprecated status):
- __getconfig - improved robodoc
- used new err::* functions for testing from liberr
- __getconfig:
  - improved tests
  - fixed bug - for err:eval required non positional variables


Thu, 13 Apr 2017 16:13:37 +0400
	New upstream release
	Version 1.90

- features of bash version 4.2 are used, performance is improved, the number of
  external utilities used is reduced:
  - small optimizations from goo.gl/tDs1In
  - used $(exec -c ...) for some external commands
  - try using tmpfs for temporary files, init \$TMPDIR
  - added udfCat function (cat analog) with timeout
  - implicit call of the loader (bashlyk) in each library with error handling
  - compatibility checked into the loader, moved some common globals init to the
    loader
- updated the list and contents of libraries - libopt.sh, libcsv.sh and
  deprecated functions from libstd.sh moved to libold.sh
- a new scheme for naming functions is applied for libnet.sh:
  <library>::<class>.<method>, so udfGetValidIPsOnly and udfGetValidCIDR are
  renamed to net::ipv4.host and net::ipv4.cidr, added new functions:
  net::ipv4.{broadcast,mask,network,range}
- libpid - udfStopProcess - fixed argument parsing
- improved code, updated robodocs and tests, externals and exports lists

bashlyk:
- added _bashlyk_s0 DEBUGLEVEL HOSTNAME init
- added global _bashlyk_ShellVersion to use available features
- udfInit - init TMPDIR variable by writable tmpfs source or /tmp

libmsg.sh:
- udf{Echo,Mail,Notify2X} - used udfCat with timeout instead 'cat'
- 'which mail ...OnError ..' replaced by 'udfOn CommandNotFound mail ..'
- udfMail - prevent empty message body, added testing
- udfMessage - the output is not duplicated to a standard device
- udfNotify2X - fixed test error, return last command status
- udfGetXSessionProperties:
  - improved code - not used external commands 'cut', 'sort', 'uniq'
  - better unification of X-Sessions helper with assosiative array
- udfNotifyCommand:
  - added debugging mode with saving the error log to
    $TMPDIR/msg.<random>.notify_command.<command>.err

liblog.sh:
- udfCheck4LogUse - use _bashlyk_sCond4Log='redirect' for test
- udfLog - improved input handling
- udfSetLogSocket updated
- udfDebug improved
- added some functions from libstd.sh - udf{TimeStamp,Finally,Uptime,DateR}

libstd.sh:
- removed deprecated functions udfBaseId and udfDate
- udfMakeTemp:
  - improved arguments handling
  - used $TMPDIR
  - no show empty line
- improved udfGetMd5

libini.sh:
- INI::__section.select - <o>.__section.get used $* instead $1
- INI::get:
  - fixed a bug due to changes in the method INI::__section.select
  - added test for key with whitespaces
- INI::__section.show - used whitespaces for ident from settings iPadding

libpid.sh:
- udfStopProcess - check argument after option checking, updated tests
- added some functions from libstd.sh (udfAdd*, udfOnTrap)
- udfAdd{FD,FO,Pid}2Clean - removed trap on 9 15 signals

libnet.sh:
- udfGetValid{IPsOnly,CIDR} renamed to net::ipv4.{host,cidr}
- added functions net::ipv4.{broadcast,mask,network}
- added new function net::ipv4.range - get range of the usable IP for CIDR
- added new regexes _bashlyk_net_re{Address,Host,Mask,MaskBit,Network,Broadcast}
- added aliases udfGetValid{IPsOnly,CIDR} for compatibility
- use keys of the array for store and unification of the results
- 'dig' and 'ipcalc' do not required now

testunit.sh:
- added temporary randomized debug log files to every lib test for stderr
  messages saving


Mon, 27 Feb 2017 16:48:08 +0400
	New upstream release
	Version 1.89

- CNF library moved to a safer way of handling the active configuration files
  (*.conf). Instead of executing external files (by using the "source" command)
  are used INI library functions.

- INI library improvements and changes:
  - INI "class" - used "::" for the method declaration
  - added internal private array for the settings and public methods for their
    management:
    - active configuration   ( INI::settings.shellmode [[=] false|true ] )
    - padding around section ( INI::settings.section.padding [[=] true|false ] )
    - sign of the comment    ( INI::settings chComment [ = <value> ] )
  - key name can be any char other than '=' in the INI mode (bShellMode = false)
  - section name can be a char class :print: (exclude '[]')
  - added workaround for doublequotes support in the section name
  - used SHA1 for internal arrays generation
  - INI::load uses a more intuitive arguments format
  - added public method - INI::keys - show all keys in the comma separated line
  - allowed to read configurations owned by the current user or root

- STD library improvements:
  - fixed udfGetPathMd5 for path with spaces
  - udfIs{Number,ValidVariable} - checking for errors made less intrusive
  - changed test for udfOnTrap

- ERR library improvements:
  - changed behavior of the udfSetLastError, added more safe 'try .. catch'
    construction than 'try-every-line .. catch-every-line'

- used 'declare -rg' for all readonly global variables of the bashlyk
- ERR library preloaded for all other default libs
- code style - used the "two spaces" indentation
- error states {Non,Not}Valid.. renamed to Invalid..
- updated documentation and improved tests
- improved error handling and code style, fixed bugs
- used 'id -n{g,u}' instead 'ps -p $$ ..' for getting user and group

- updated ROBODOC configuration, added new header types and set their order:
  - F(Files), V(Versions), L(External libraries), G(Global variables),
    e(external function), p(internal function)
  - change label 'RETURN VALUE' to 'ERRORS' where it makes sense
  - added and updated USES section of the lib headers

Detailed:

libini.sh:
- INI constructor - removed excess assignment
- _bashlyk_iniMethods renamed to _bashlyk_methods_ini
- improved error handling and arguments parsing for INI::{get,set}
- INI::load:
  - used colon (:) for split section options in the argument list
  - return state "NoSuchFileOrDir" if source INI-file not found
  - removed checking second argument
  - used new format of the arguments, example:
    []key1,key2,key3 : [section1]key1,key2,key3 [rawsection]=
  - check basename of source for illegal lead and trail dots
- INI::__section.{id,select,setRawData,getArray} - used $* or $@ instead $1
- INI::__section.{select,show} - applied workaround for doublequotes support in
  the section names
- INI::__section.show:
  - support keys with spaces
  - get padding value from service array (if exist)
  - show content of section with padding around equal between key and value
  - doublequoting for values of the active configuration mode supported, applied
    only if needed ( $(INI::settings.shellmode) == true )
  - used INI::settings.section.padding for section header form when saving
- added properties:
  - bSectionPadding - enable/disable padding with one whitespace around section
    name
  - chComment - control character(s) for use as directive of the comments
  - reKey, reKeyVal, fmtPairs - properties of the configuration mode
- added new public methods:
  - INI::settings for access to properties of the instance
  - INI::settings.shellmode for control the configuration mode
  - INI::settings.section.padding for control padding around section name
- added global constants $_bashlyk_{cnf,inf}_{fmt,re}KeyVal for regexes
- constants $_bashlyk_ini_reKey_{a,i}m renamed to $bashlyk_{cnf,ini}_reKey
- INI::__section.getArray:
  - return EmptyResult state on empty result
- INI::read:
  - added tests for MissingArgument and NoSuchFileOrDir states
  - added key=value pairs check, depending on the $(INI::settings.shellmode)
- INI::bind.cli:
  - use OnError for reaction
  - detailed checking getopt result
- INI::getopt:
  - improved code and error handling
  - added tests for 'MissingArgument', 'NotAvailable', 'InvalidArgument' and
    'EmptyResult'
- INI::keys:
  - show comma separated key list of the selected section
- INI::set:
  - fixed typo in the local var
  - key checked, depending on the $( INI.settings.shellmode )
  - used udfTrim for key and value trimming
  - fixed values with '[]', improved code
- constructor INI - improved error handling
- added new error states Ini{Bad,Missing}Method
- split long lines (more 80 char) of the code

libstd.sh:
- improved udfQuoteIfNeeded - no duplicate quotes
- udfLocalVarFromCSV - 'throw' on errors deffered for eval
- added function udfTrim for remove leading and trailing spaces,
  used recept from http://stackoverflow.com/a/22236641
- udfGetPathMd5:
  - used 'while read .. done< <(ls -1rdt *)' instead 'for .. in * ..'
  - fixed test

liberr.sh:
- added error states 'NotAvailable', 'NotNumber', 'InvalidOption'
- removed using STD::udfIsNumber
- udfOn - added command retwarn (experimental)
- 'onError' command change to lower case
- changed behavior of the udfSetLastError - empty input text for message of
  error are ignored

libnet.sh:
- fixed error of the DNS name resolving
- udfGetValidCIDR - 'throw' action replaced to 'return' on empty _reIPv4

libpid.sh:
- udfStopProcess - background process sometimes starts later than will
  be checked, implement temporary fixes

testunit.awk:
- added new labels - 'e' 'p' 'm'

robodoc.css:
- disabled underline for main list
- added style class 'ul li a'

src/Makefile.am:
- added file ../VERSION to syslib_DATA

- added debian/docs


Mon, 19 Dec 2016 15:22:59 +0400
	New upstream release
	Version 1.88

 significantly redesigned library libini.sh, which is now based on the following
 ideas:
 - associative arrays are used to store the INI configuration data, instead of
   the CSV, as previously
 - used for the treatment of OOP style INI configuration data:
   * functions (eg, get/set) associated with the configuration data, as
     "methods" of the corresponding instance of the base class "INI"
   * used the constructor and destructor to manage the life cycle of the
     resources allocated for processing configuration data
 - a more convenient way to parse command line arguments and their binding to
   configuration data that allows you to override the command line options
   INI-file
 - supports simultaneous determination of long and short options of
   configuration parameters.
 - no need to declare variables for the INI and CLI options
 - INI section is formatted by the width of the longest key at operations save
   or output
 - old code of the libini.sh moved to the libcsv.sh for support the scripts that
   use earlier versions of the bashlyk

 Example code:

   INI ini
   ini.bind.cli config{c}: source{s}:-- help{h} mode{m}: dry-run
   conf=$( ini.getopt config )
   ini.load $conf :mode,help dry:run source:=
   if [[ $( ini.get [dry]run ) ]]; then
     echo "dry run, view current config:"
     ini.show
     exit 0
   fi

   ini.set mode = demo
   ini.set [source] = $HOME
   ini.set [source] = /var/mail/$USER

   ini.save $conf
   ini.free

liberr.sh:
- added handler udfNoSuchFileOrDir for udfOn
- added iErrorInvalidHash state

bashlyk.conf:
- added libcsv.sh to the standart library list for compatibility


Sun, 30 Oct 2016 00:39:00 +0400
	Fix bugs
	Version 1.87

 - improved handling of processes through the use of pattern with the boundaries
   command-line pattern must contain the process name
 - improved tests and descriptions

libpid.sh:
 - improved udfSetPid - fixed race condition by flock using for PID file locking
 - removed deprecated udfClean
 - fixed and improved udfStopProcess:
   * added the ability to delete a group of processes associated with the
     command line
   * PID argument replaced by the option "pid=<PID>[,..]"
   * added option "childs" - stop only child processes
   * successful return code is calculated implicitly - the resulting list of
     processes is empty and at least one process has been stopped

libstd.sh:
 - added new functions:
   * udfGetTimeInSec from project "kurenma"
   * udfGetFreeFD for getting free filedescriptor
   * udfAddFD2Clean for collect open file descriptors
 - improved udfOnTrap:
   * handling open filedescriptors
   * set {i,s}LastError on 'kill' fail
 - udfAddFObj2Clean renamed to udfAddFO2Clean and aliased for compatibility

liberr.sh:
 - added error states:
   * iErrorNotChildProcess
   * iErrorAlreadyLocked
 - changed error message for state iErrorAlreadyStarted
 - fixed udfThrow test unit

libmsg.sh:
 - udfMail - removed using '-v' for 'mail' command
 - udfGetXSessionProperties changes:
   * used 'pgrep -f ..." instead 'ps -C ...'
   * ignored stderr from 'grep -az ...'


Sat, 24 Sep 2016 21:53:04 +0400
	New upstream release
	Version 1.86

 - added flag _bashlyk_log=nouse for for the unconditional disabling of logging
 - added new library libnet with functions udfGetValid{IPsOnly,CIDR}
 - updated external command and exported functions lists

libstd.sh:
 - enhanced udfMakeTemp with temporary pipe creating feature:
   * used recursive call for assign result to variable
   * randomized local variables not required
   * added bash printf like syntax support for variable assign - '-v'
   * rewrited robodoc and test units
   * supported old version behavior when used first argument as valid variable
   * used single function udfAddFObj2Clean instead udfAdd{File,Path}2Clean
   * improved code, used 5 letters constraint for prefix (tempfile behavior)
   * chown, chgrp executed only by root
 - updated dependence udfMakeTempV (absolete function)
 - rewrited udfCheckCsv:
   * randomized local variable not required
   * used  recursive call for assign result to variable
   * added bash printf like syntax support for variable assign - '-v'
 - fixed function _() bug of mask external $k and $v variables, local variables
   do not used now
 - added function udfAddFObj2Clean and global variable _bashlyk_afoClean for
   collect temporary filesystem objects to single list
 - udfAdd{File,Path}2Clean now aliases for udfAddFObj2Clean
 - improved udfOntrap - child processes terminate in reverse order, handled
   common list of temporary objects
 - added function udfLocalVarFromCSV for define local variables from CSV-string,
   e.g. INI options list for libini::udfIni function
liberr.sh:
 - udfOnError now (and alias udfOnError2) printed messages to stderr
 - added function udOnfError1 that printed messages to stdout
 - updated test units for support changes, increased perceptivity
 - udfOn - check handler for the state by using 'typeset -f', added support for:
   * Empty{Argument,Result}
   * Invalid{Argument,Variable}
 - removed error code 255 from table ( used as 'out by range' by system), states
   shifted
 - added new error state InvalidFunction
liblog.sh:
 - udfUptime - shows only decimal number of seconds
 - udfFinally - shows the text of runtime
libpid.sh:
 - add new function udfStopProcess
 - improved udfCheckProcess - PID checked as number, updated test and robodoc


Mon, 22 Aug 2016 02:06:21 +0400
	New upstream release
	Version 1.85
 - added new library liberr.sh with error message table
 - added tool get-external-commands-and-export-list.sh for show all function
   names and search used external binaries, get main external commands list from
   system (Debian)
 - updated and fixed external commands list and export list of functions
   for all libraries
 - safety using of a printf - separated options and arguments, transferred
   variables from format to arguments
 - added the library template libtst.sh for additional testing
 - removed unused libppp.sh
liberr.sh:
 - moved from libmsg.sh functions and wrappers:
   * udfThrow
   * udf{,Throw,Warn}OnCommandNotFound
   * udf{,Throw,Warn}OnEmptyVariable
 - added new function udfOn for replace udfOn{CommandNotFound,EmptyVariable}
 - added new functions udf{CommandNotFound,EmptyVariable,EmptyOrMissingArgument}
   for single condition testing. Used from udfOn
 - refactored wrappers udf{Throw,Warn}On.. by using udfOn
 - added new wrappers udf{Throw,Warn}OnEmptyOrMissingArgument
 - udfThrowOnEmptyVariable - test fixed
 - added table of error messages $_bashlyk_hError, that used as ordinary array
 - udfSetLastError:
   * fixed bug of return code validation
   * added support for xLastError separated by processes
   * added support for predefined names like 'XXX' ($_bashlyk_iErrorXXX)
   * improved test unit
 - udfOnError:
   * added new embedded commands 'exitecho' and 'exitwarn'
   * added support for table of error messages ($_bashlyk_hError)
   * changed message format
   * improved test unit
 - added new function udfOnError2 - wrapper for udfOnError that output sent to
   stderr, ROBOdoc refers to the udfOnError
 - udfThrow:
   * added support for $_bashlyk_sLastError[$BASHPID]
   * used the last command error code (or 255) if the value of the variable
     ${_bashlyk_iLastError[$BASHPID]} is not a number
   * improved tests
   * used 'eval $(udfOnError ..' instead 'udfWarn ..' and 'exit ..'
 - added for testing function 'udfTryEveryLine' and alias 'try-every-line'
   this applied control like 'try .. catch' for every lines between
   'try-every-line' and 'catch-every-line', supress stdout for successfully
   processing (show 'dot' only) and abort for error with stacktrace and error
   message, used heredoc for clarity into test unit
 - added error states - Unknown,NotSupported,EmptyVariable,TryBoxException
 - iErrorUnknown equal iErrorUnexpected
 - $_bashlyk_sBehaviorOnError renamed to $_bashlyk_onError
 - removed unused global variables
libmsg.sh:
 - udfNotify2X - used '=$(< ..)' instead '=$(cat ..)'
 - udfWarn:
   * added support for $_bashlyk_sLastError[$BASHPID]
   * improved test unit, but it requires more work
libstd.sh:
 - removed unused global variables
 - udfTimeStamp - changed test identation
 - added function udfPrepareByType - present argument 'Array[item]' as
   '{Array[item]}'
 - _ (function) - added support for items of array ( as 'Array[item]' )
liblog.sh:
 - udfDebug output sent to stderr
bashlyk:
 - added liberr.sh as one of the main libraries
 - udfMain (the entry point) can be called without arguments
debian/control
 - added bc dependency (used by testunit.sh)


Thu, 25 Jun 2015 14:28:10 +0400
	Fix bugs
	Version 1.84
liblog.sh:
 - udfTimeStamp - fixed a parasitic formatting for arguments with '%'
 - udfLogger - command 'logger' used without -s option
 libmsg.sh:
 - udfGetXSessionProperties - added support for the Q4OS distribution (1.2.x) by
   using command "twin" in the search list of the X-session
 debian/control:
 - added a dependency from the package findutils (xargs)
 libstd.sh:
 - job management has been removed due to lack of functionality
 robodoc.rc:
 - used a 'single file' mode for robodoc HTML documentation
 - the CSS settings are set in the robodoc.css
 - added syntax highlighting in the source code section
 Makefile.am:
 - added generation of the robodoc HTML documentation with header patching


--8<-- truncated -->8--

--
$Id: ChangeLog 878 2018-08-29 00:01:28+04:00 yds $
