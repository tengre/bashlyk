#!/bin/bash
#
# $Id: bashlyk 793 2018-02-19 22:17:20+04:00 toor $
#
#****h* BASHLYK/bashlyk
#  DESCRIPTION
#    Loader for BASHLYK-libraries. Prepares the structure of the necessary
#    directories and files, determines the interactivity of the running script,
#    allows you to run the library test module
#  AUTHOR
#    Damir Sh. Yakupov <yds@bk.ru>
#******
#***iV* bashlyk/BASH Compatibility
#  DESCRIPTION
#    BASH version 4.xx or more required for this script
#  SOURCE
[ -n "$_BASHLYK" ] && return 0 || _BASHLYK=1
[ -n "$BASH_VERSION" ] && (( ${BASH_VERSINFO[0]} >= 4 )) || eval '             \
                                                                               \
    echo "[!] BASH shell version 4.xx required for ${0}, abort.."; exit 255    \
                                                                               \
'
#******
#****G* bashlyk/Global variables
#  DESCRIPTION
#    global variables of the library
#  SOURCE
[[ -s "/etc/bashlyk/bashlyk.conf" ]] && . /etc/bashlyk/bashlyk.conf
: ${_bashlyk_aLib:="std,ini,err,pid,net,log,msg"}
: ${_bashlyk_pathLib:="/usr/share/bashlyk"}
: ${_bashlyk_s0:=${0##*/}}
: ${_bashlyk_sArg:="$@"}
: ${_bashlyk_bInteract:=1}
: ${_bashlyk_bTerminal:=1}
: ${_bashlyk_sCond4Log:=noterm}
: ${_bashlyk_bNotUseLog:=0}
: ${USER:=$( exec -c id -nu )}
: ${_bashlyk_sUser:=$USER}
: ${_bashlyk_sGroup:=$( exec -c id -ng )}
: ${HOSTNAME:=$( exec -c hostname 2>/dev/null )}
: ${DEBUGLEVEL:=0}
: ${_bashlyk_ShellVersion:=$(                                                  \
    printf '%d%03d%03d'                                                        \
           "${BASH_VERSINFO[0]}"                                               \
           "${BASH_VERSINFO[1]}"                                               \
           "${BASH_VERSINFO[2]}"                                               \
    )                                                                          \
}
declare -rg _bashlyk_PWD=${PWD:=$(pwd)}
#******
#****f* bashlyk/bashlyk::init
#  SYNOPSIS
#    bashlyk::init
#  DESCRIPTION
#    Preparing to run the script, determine the conditions of its operation
#    (directories of the location of the created files, the presence of a
#    terminal, redirection, etc.)
#    If the startup is performed from "root", then the directories are located
#    globally, according to the FHS standard, otherwise - in the directories
#    according to the XDG Base Directory Specification.
#    In the event that it was not possible to determine the owner of the process
#    or if there is no home directory, the hierarchy of script objects is
#    created in the global temporary directory $TMPDIR
#  SOURCE
bashlyk::init() {

  local s IFS=$' \t\n'

  if [[ $_bashlyk ]]; then

    _bashlyk_sId="$_bashlyk"
    _bashlyk_pathPrefix="$_bashlyk"

  else

    _bashlyk_sId=${_bashlyk_s0%.sh}
    _bashlyk_pathPrefix='bashlyk'

  fi

  case $_bashlyk_sUser in

    'root')

            _bashlyk_pathCnf="/etc/${_bashlyk_pathPrefix}"
            _bashlyk_pathIni="/etc/${_bashlyk_pathPrefix}"
            _bashlyk_pathRun="/var/run/${_bashlyk_pathPrefix}"
            _bashlyk_pathLog="/var/log/${_bashlyk_pathPrefix}"
            _bashlyk_pathDat="/var/lib/${_bashlyk_pathPrefix}"
            [[ -s "/etc/${_bashlyk_pathPrefix}/bashlyk.conf" ]] \
             && . "/etc/${_bashlyk_pathPrefix}/bashlyk.conf"
    ;;

         *)
            if [[ -z "$HOME" || ! -O "$HOME" ]]; then

              s=$(getent passwd $_bashlyk_sUser | cut -d ":" -f 6)
              [[ $s && -d "$s" && -O "$s" ]] || \
               s="/${TMPDIR}/${$}_${_bashlyk_sUser}"

            else

              s=$HOME

            fi

            _bashlyk_pathRun="${s}/.cache/${_bashlyk_pathPrefix}/run"
            _bashlyk_pathLog="${s}/.local/share/${_bashlyk_pathPrefix}/log"
            _bashlyk_pathDat="${s}/.local/share/${_bashlyk_pathPrefix}/lib"
            _bashlyk_pathCnf="${s}/.config/${_bashlyk_pathPrefix}"
            _bashlyk_pathIni="${s}/.config/${_bashlyk_pathPrefix}"

            [[ -s "${s}/.config/bashlyk/bashlyk.conf" ]] \
              && . "${s}/.config/bashlyk/bashlyk.conf"

            [[ -s "${s}/.config/${_bashlyk_pathPrefix}/bashlyk.conf" ]] \
              && . "${s}/.config/${_bashlyk_pathPrefix}/bashlyk.conf"

         ;;
  esac

  ## TODO check exists of the /proc/mounts
  for TMPDIR in /dev/shm /run/shm /tmp $_bashlyk_pathDat; do

    [[ -w $TMPDIR ]] || continue
    s=$( findmnt -n -o SOURCE,TARGET --target $TMPDIR | xargs )

    if ! grep "${s}.*noexec" /proc/mounts >/dev/null 2>&1; then

      declare -rg TMPEXEC=$TMPDIR
      break

    fi

  done
  unset s

  if [[ ! $TMPEXEC ]]; then

    echo "warn: not found filesystem for exec temporary files"
    TMPEXEC=$TMPDIR

  fi

  [[ -t 1 ]] && _bashlyk_bInteract=1 || _bashlyk_bInteract=0
  tty > /dev/null 2>&1 && _bashlyk_bTerminal=1 || _bashlyk_bTerminal=0

  if [[ "$_bashlyk_sArg" =~ bashlyk-test ]]; then

    _bashlyk_aUnit="$(echo "${_bashlyk_sArg#*--bashlyk-test=}" | cut -f1 -d' ' \
      | tr ',' ' ' | grep -v '\-\-bashlyk-test')"

    [[ $_bashlyk_aUnit ]] || _bashlyk_aUnit="$(echo $_bashlyk_aLib|tr ',' ' ')"

    _bashlyk_sMode='test'

    export _bashlyk_pathIni _bashlyk_pathRun _bashlyk_pathDat _bashlyk_pathLog \
           _bashlyk_sLogin _bashlyk_bUseMail _bashlyk_sUser _bashlyk_sGroup    \
           _bashlyk_ShellVersion

  else

    _bashlyk_sMode='lib'

  fi

  [[ $_bashlyk_aUnit ]] || _bashlyk_aUnit="${_bashlyk_aLib//,/ }"

}
#******
#****f* bashlyk/bashlyk::main
#  SYNOPSIS
#    bashlyk::main
#  DESCRIPTION
#    Initialization, loading libraries, starting the logging process if there is
#    a redirection of standard devices or loss of the terminal depending on the
#    value of $_bashlyk_sCond4Log ("noterm" by default).
#  SOURCE
bashlyk::main() {

  local cmd fn s IFS=$' \t\n'

  bashlyk::init

  if [[ "$_bashlyk_sMode" == "test" ]]; then

    cmd=${_bashlyk_pathLib}/testunit.sh

    [[ -x "$cmd" ]] || eval 'echo "Error: $cmd not found..."; exit 255'

    for s in $_bashlyk_aUnit; do $cmd $s; done

    exit $?

  else

    for s in $_bashlyk_aUnit; do

      fn=${_bashlyk_pathLib}/lib${s}.sh
      [[ -s "$fn" ]] && . $fn || eval 'echo "Error: $fn not found..."; exit 255'

    done

  fi

  unset _bashlyk_aUnit _bashlyk_sMode

  [[ $_bashlyk_log == "nouse" ]] && return 0

  case ${_bashlyk_sCond4Log} in

    redirect) _bashlyk_bNotUseLog=$_bashlyk_bInteract ;;
      noterm) _bashlyk_bNotUseLog=$_bashlyk_bTerminal ;;
           *) _bashlyk_bNotUseLog=$_bashlyk_bInteract ;;

  esac

  [[ "$_bashlyk_bNotUseLog" != "0" ]] || log::file

  return 0

}
#******
#****** bashlyk/Entry Point
#  DESCRIPTION
#    loader entry point
#  SOURCE
bashlyk::main
#******
