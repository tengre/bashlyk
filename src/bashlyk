#!/bin/bash
#
# $Id$
#
#****h* bashlyk/bashlyk
#  DESCRIPTION
#    bashlyk - сценарий подключения BASHLYK
#  AUTHOR
#    Damir Sh. Yakupov <yds@bk.ru>
#******
#****d* bashlyk/libcnf/Required Once
#  DESCRIPTION
#    Глобальная переменная $_BASHLYK обеспечивает
#    защиту от повторного использования данного модуля
#  SOURCE
[ -n "$_BASHLYK" ] && return 0 || _BASHLYK=1
#******
#****v* bashlyk/Init section
#  DESCRIPTION
#    Блок инициализации глобальных переменных
#  SOURCE
[ -s /etc/bashlyk/bashlyk.conf ] && . /etc/bashlyk/bashlyk.conf
: ${_bashlyk_aLib:="std,log,cnf,pid,md5,opt,xml"}
: ${_bashlyk_pathLib:="/usr/share/bashlyk"}
: ${_bashlyk_sArg:=$*}
: ${_bashlyk_bInteract:=1}
: ${_bashlyk_bTerminal:=1}
: ${_bashlyk_sCond4Log:=noterm}
: ${_bashlyk_bNotUseLog:=0}
#******
#****f* bashlyk/udfInit
#  SYNOPSIS
#    udfInit
#  DESCRIPTION
#    Подготовка к запуску сценария, определение условий его работы
#    (каталоги расположения создаваемых файлов, наличие терминала, перенаправления и т.п.)
#    Если запуск выполняется от "root", то каталоги располагаются глобально, согласно LSB, 
#    иначе - в каталоге ~/.bashlyk или во временном каталоге, если не удалось определить
#    владельца процесса
#  SOURCE
udfInit() {
 local pathCnf pathRoot pathRun pathLog pathDat sHome
 #
 _bashlyk_sId=${_bashlyk:-bashlyk}
 [ -n "$_bashlyk" ] && _bashlyk_pathPrefix="/${_bashlyk}" || _bashlyk_pathPrefix=
 pathCnf="etc${_bashlyk_pathPrefix}"
 pathLog="var/log${_bashlyk_pathPrefix}"
 pathRun="var/run${_bashlyk_pathPrefix}"
 pathDat="var/lib${_bashlyk_pathPrefix}"
 _bashlyk_sUser=$(ps -p $$ -o user=)
 _bashlyk_sGroup=$(ps -p $$ -o group=)

 case $_bashlyk_sUser in
  'root')
   pathRoot=''
  ;;
  '')
   pathRoot="/tmp/${$}_${USER}/.bashlyk"
  ;;
  *)
   if [ -z "$HOME" -o ! -O "$HOME" ]; then
    sHome=$(getent passwd $_bashlyk_sUser | cut -d ":" -f 6)
    [ -n "$sHome" -a -d "$sHome" -a -O "$sHome" ] \
     && pathRoot="${sHome}/.bashlyk" \
     || pathRoot="/tmp/${$}_${_bashlyk_sUser}/.bashlyk"
   else
    pathRoot="${HOME}/.bashlyk"
   fi
  ;;
 esac

 _bashlyk_pathRun="${pathRoot}/${pathRun}"
 _bashlyk_pathLog="${pathRoot}/${pathLog}"
 _bashlyk_pathCnf="${pathRoot}/${pathCnf}"
 _bashlyk_pathDat="${pathRoot}/${pathDat}"

 [ -t 1 ] && _bashlyk_bInteract=1 || _bashlyk_bInteract=0
 tty > /dev/null 2>&1 && _bashlyk_bTerminal=1 || _bashlyk_bTerminal=0
}
#******
#****f* bashlyk/udfMain
#  SYNOPSIS
#    udfMain <args>
#  DESCRIPTION
#    Инициализация, подключение модулей, запуск процесса протоколирования
#    в случае наличия перенаправления стандартных устройств или потери терминала
#    в зависимости от значения $_bashlyk_sCond4Log ("noterm" по умолчанию).
#  SOURCE
udfMain() {
 local fn fnLib
 #
 udfInit
 #
 for fn in $(echo ${_bashlyk_aLib} | tr ',' ' '); do
  fnLib="${_bashlyk_pathLib}/lib${fn}.sh"
  [ -s $fnLib ] && . $fnLib || eval 'echo "error with $fnLib using"; exit 255'
 done
 case ${_bashlyk_sCond4Log} in
  redirect)
           _bashlyk_bNotUseLog=$_bashlyk_bInteract ;;
    noterm)
           _bashlyk_bNotUseLog=$_bashlyk_bTerminal ;;
         *)
           _bashlyk_bNotUseLog=$_bashlyk_bInteract ;;
 esac
 [ $_bashlyk_bNotUseLog -ne 0 ] || udfSetLog
 return 0
}
#******
#****** bashlyk/Main section
#  DESCRIPTION
#    Вызов udfMain - подключение системы BASHLYK к сценарию
#  SOURCE
udfMain $*
#******
